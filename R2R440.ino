#include <avr/pgmspace.h>
#include <avr/io.h>
#include <avr/interrupt.h>
#include <math.h>

#include <stdint.h>
#include <inttypes.h>

#define PHASE_BITS 32
#define SIN_BITS 8
#define R2R_BITS 8

int LED = 13;

#define ARRAY_SIZE(a) (sizeof(a)/sizeof(a[0]))

uint8_t  SIN8[256] PROGMEM = {
  0x80, 0x83, 0x86, 0x89, 0x8C, 0x90, 0x93, 0x96,
  0x99, 0x9C, 0x9F, 0xA2, 0xA5, 0xA8, 0xAB, 0xAE,
  0xB1, 0xB3, 0xB6, 0xB9, 0xBC, 0xBF, 0xC1, 0xC4,
  0xC7, 0xC9, 0xCC, 0xCE, 0xD1, 0xD3, 0xD5, 0xD8,
  0xDA, 0xDC, 0xDE, 0xE0, 0xE2, 0xE4, 0xE6, 0xE8,
  0xEA, 0xEB, 0xED, 0xEF, 0xF0, 0xF1, 0xF3, 0xF4,
  0xF5, 0xF6, 0xF8, 0xF9, 0xFA, 0xFA, 0xFB, 0xFC,
  0xFD, 0xFD, 0xFE, 0xFE, 0xFE, 0xFF, 0xFF, 0xFF,
  0xFF, 0xFF, 0xFF, 0xFF, 0xFE, 0xFE, 0xFE, 0xFD,
  0xFD, 0xFC, 0xFB, 0xFA, 0xFA, 0xF9, 0xF8, 0xF6,
  0xF5, 0xF4, 0xF3, 0xF1, 0xF0, 0xEF, 0xED, 0xEB,
  0xEA, 0xE8, 0xE6, 0xE4, 0xE2, 0xE0, 0xDE, 0xDC,
  0xDA, 0xD8, 0xD5, 0xD3, 0xD1, 0xCE, 0xCC, 0xC9,
  0xC7, 0xC4, 0xC1, 0xBF, 0xBC, 0xB9, 0xB6, 0xB3,
  0xB1, 0xAE, 0xAB, 0xA8, 0xA5, 0xA2, 0x9F, 0x9C,
  0x99, 0x96, 0x93, 0x90, 0x8C, 0x89, 0x86, 0x83,
  0x80, 0x7D, 0x7A, 0x77, 0x74, 0x70, 0x6D, 0x6A,
  0x67, 0x64, 0x61, 0x5E, 0x5B, 0x58, 0x55, 0x52,
  0x4F, 0x4D, 0x4A, 0x47, 0x44, 0x41, 0x3F, 0x3C,
  0x39, 0x37, 0x34, 0x32, 0x2F, 0x2D, 0x2B, 0x28,
  0x26, 0x24, 0x22, 0x20, 0x1E, 0x1C, 0x1A, 0x18,
  0x16, 0x15, 0x13, 0x11, 0x10, 0x0F, 0x0D, 0x0C,
  0x0B, 0x0A, 0x08, 0x07, 0x06, 0x06, 0x05, 0x04,
  0x03, 0x03, 0x02, 0x02, 0x02, 0x01, 0x01, 0x01,
  0x01, 0x01, 0x01, 0x01, 0x02, 0x02, 0x02, 0x03,
  0x03, 0x04, 0x05, 0x06, 0x06, 0x07, 0x08, 0x0A,
  0x0B, 0x0C, 0x0D, 0x0F, 0x10, 0x11, 0x13, 0x15,
  0x16, 0x18, 0x1A, 0x1C, 0x1E, 0x20, 0x22, 0x24,
  0x26, 0x28, 0x2B, 0x2D, 0x2F, 0x32, 0x34, 0x37,
  0x39, 0x3C, 0x3F, 0x41, 0x44, 0x47, 0x4A, 0x4D,
  0x4F, 0x52, 0x55, 0x58, 0x5B, 0x5E, 0x61, 0x64,
  0x67, 0x6A, 0x6D, 0x70, 0x74, 0x77, 0x7A, 0x7D
};


uint32_t freq_table[] PROGMEM = {
  561781,
  595110,
  630501,
  668296,
  707810,
  750073,
  794397,
  841813,
  891978,
  944892,
  1001242,
  1060685,
  1123563,
  1190564,
  1261345,
  1336250,
  1415621,
  1499802,
  1589137,
  1683627,
  1783614,
  1889785,
  2002141,
  2121370,
  2247470,
  2381129,
  2522691,
  2672500,
  2831586,
  2999948,
  3178275,
  3367254,
  3567571,
  3779571,
  4004283,
  4242396,
  4494597,
  4761916,
  5045040,
  5345000,
  5662828,
  5999553,
  6356551,
  6734508,
  7134799,
  7559142,
  8008567,
  8484793,
  8989538,
  9523832,
  10090080,
  10690345,
  11326000,
  11999451,
  12712759,
  13469017,
  14269599,
  15118284,
  16017135,
  16969587,
  17978733,
  19048008,
  20180505,
  21380347,
  22651657,
  23998902,
  25425862,
  26937691,
  28539542,
  30236569,
  32034614,
  33939518,
  35957466,
  38095672,
  40361010,
  42761037,
  45303658,
  47997462,
  50851725,
  53875382,
  57079084,
  60473139,
  64069229,
  67878693,
  71914932,
  76191345,
  80722020,
  85522075,
  90607317,
  95995267,
  101703451,
  107750765,
  114158169,
  120946279,
  128138115,
  135757731,
  143830208,
  152382690,
  161443697,
  171043808,
  181214634,
  191990192,
  203406558,
  215501873,
  228316338,
  241892558,
  256276231,
  271515119
};


const double refclk = 125000;
volatile uint32_t tuning_word = 0;
volatile uint32_t phase = 0;
volatile uint8_t play_timer = 0;

void set_freq(double freq) {
  tuning_word = pow(2,32)*freq / refclk;
}

void setup() {
  pinMode(LED, INPUT);
  pinMode(LED, HIGH);
  
  // all bits output
  DDRD = 0xff;
  tuning_word = pgm_read_dword_near(freq_table + 50);

  // clock is 8 mhz, want a 125000 hz timer (/64 prescale)
  cli();
  TCNT0 = 0;
  TCCR0A = (1 << WGM01); // CTC, no pin toggles
  TCCR0B = (1 << CS01) | (1 << CS00); // /64 prescale (125000hz)
  OCR0A = 1; // interrupt every timer step, 125000hz hz compare match
  TIMSK0 |= (1 << OCIE0A);
  sei();
}

ISR(TIMER0_COMPA_vect) {
  uint8_t value = pgm_read_byte_near(SIN8 + (phase >> (PHASE_BITS - SIN_BITS)));
  PORTD = value >> (8 - R2R_BITS);
  phase += tuning_word;
  ++play_timer;
}

uint8_t wait = 0;
int note = 0;

void loop() {
  while(play_timer != 0) { }
  wait++;
  
  if(wait == 8) {
    tuning_word = pgm_read_dword_near(freq_table + note);
    note = (note + 1) % ARRAY_SIZE(freq_table);
    wait = 0;
  }
  
  while(play_timer == 0) {}
}

